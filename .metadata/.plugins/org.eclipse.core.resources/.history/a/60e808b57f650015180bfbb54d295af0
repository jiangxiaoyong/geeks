package TreeAndGraph;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.TreeMap;

public class LevelOrderTraversel {

	int cur = 0;
	public Map<Integer,ArrayList<Integer>> traverse(Node node){
		if(node == null) return null;
		//List<ArrayList<Integer>> lists = new ArrayList<ArrayList<Integer>>();
		Map<Integer, ArrayList<Integer>> lists = new TreeMap<Integer,ArrayList<Integer>>();
		//solution(node, lists, 1);
		solution2(node, lists);
		return lists;
	}
	
	public void solution(Node node,List<ArrayList<Integer>> result, int level	){
		if(node == null) return;
		
		if(cur < level){
			cur = level;
			ArrayList<Integer> list = new ArrayList<Integer>();
			list.add(node.data);
			result.add(list);
		}else{
			ArrayList<Integer> list = result.get(level -1);
			list.add(node.data);
		}
		
		solution(node.left, result, level+ 1);
		solution(node.right, result, level+1);
	}
	
	public void solution2(Node node, Map<Integer, ArrayList<Integer>> result){
		Queue<Qnode> queue = new LinkedList<Qnode>();
		queue.add(new Qnode(0, node));
		
		while(!queue.isEmpty()){
			Qnode qn = queue.remove();
			int level = qn.level;
			Node n = qn.node;
			
			if(!result.containsKey(level)){
				ArrayList<Integer> list = new ArrayList<Integer>();
				list.add(n.data);
				result.put(level, list);
			}else{
				ArrayList<Integer> list = result.get(level);
				list.add(n.data);
			}
			
			if(node.left != null){
				queue.add(new Qnode(level+1, node.left));
			}
			if(node.right!= null){
				queue.add(new Qnode(level+1, node.right));
			}
			
		}
	}
	public static void main(String[] args) {
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.left = new Node(4);
		root.left.right = new Node(5);
		root.left.right.left = new Node(6);
		root.left.right.right = new Node(7);
		root.right.right = new Node(8);
		
		LevelOrderTraversel object = new LevelOrderTraversel();
		Map<Integer,ArrayList<Integer>> list = object.traverse(root);
		for(Map.Entry<Integer, ArrayList<Integer>> entry : list.entrySet()){
			ArrayList<Integer> l = entry.getValue();
			System.out.println("next level");
			System.out.println(l);
		}
	}

}
