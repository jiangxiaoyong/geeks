package TreeAndGraph;

public class DeepestLeftLeaf {

	int deepest = Integer.MIN_VALUE;
	int value;
	public int deepestLeft(Node node){
		return find(node, 0, true);
	}
	
	public int find(Node node, int level, boolean isLeft){
		
		if(node == null) return level -1;
		if(isLeft == true && node.left == null && node.right == null){
			if(level > deepest){
				deepest = level;
				value = node.data;
				return deepest;
			}
		}
		
		return Math.max(find(node.left, level+1, true), find(node.right, level+1, false));
	}
	public static void main(String[] args) {
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.left = new Node(4);
		root.left.right = new Node(5);
		root.left.right.left = new Node(6);
		//root.left.right.left.left = new Node(10);
		root.left.right.right = new Node(7);
		root.left.right.right.right = new Node(9);
		root.right.right = new Node(8);
		
		DeepestLeftLeaf object = new DeepestLeftLeaf();
		int i = object.deepestLeft(root);
		System.out.println(i);
		System.out.println("value " + object.value);
	}

}
